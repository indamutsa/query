/*
 * generated by Xtext 2.25.0
 */
package com.arsene.workflow.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class WorkflowGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class WorkflowProgramModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.arsene.workflow.Workflow.WorkflowProgramModel");
		private final Assignment cFeaturesAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cFeaturesFeatureParserRuleCall_0 = (RuleCall)cFeaturesAssignment.eContents().get(0);
		
		///**
		// * In this chapter, we implemented a DSL for expressions. This allowed us to explore
		// * some techniques for dealing with recursive grammar rule definitions in Xtext
		// * grammars and some simple type checking. We also showed how to write an
		// * interpreter for an Xtext DSL.
		// * In the next chapter, we will develop a small object-oriented DSL. We will use this
		// * DSL to show some advanced type checking techniques that deal with object-oriented
		// * features such as inheritance and subtyping (type conformance).
		// */
		//WorkflowProgramModel:
		//    features+=Feature*;
		@Override public ParserRule getRule() { return rule; }
		
		//features+=Feature*
		public Assignment getFeaturesAssignment() { return cFeaturesAssignment; }
		
		//Feature
		public RuleCall getFeaturesFeatureParserRuleCall_0() { return cFeaturesFeatureParserRuleCall_0; }
	}
	public class FeatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.arsene.workflow.Workflow.Feature");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cStatementAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cStatementStatementParserRuleCall_0_0 = (RuleCall)cStatementAssignment_0.eContents().get(0);
		private final Assignment cMethodAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cMethodMethodParserRuleCall_1_0 = (RuleCall)cMethodAssignment_1.eContents().get(0);
		private final Assignment cWorkflowAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cWorkflowWorkflowParserRuleCall_2_0 = (RuleCall)cWorkflowAssignment_2.eContents().get(0);
		
		//Feature:
		//    statement=Statement | Method=Method | workflow=Workflow;
		@Override public ParserRule getRule() { return rule; }
		
		//statement=Statement | Method=Method | workflow=Workflow
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//statement=Statement
		public Assignment getStatementAssignment_0() { return cStatementAssignment_0; }
		
		//Statement
		public RuleCall getStatementStatementParserRuleCall_0_0() { return cStatementStatementParserRuleCall_0_0; }
		
		//Method=Method
		public Assignment getMethodAssignment_1() { return cMethodAssignment_1; }
		
		//Method
		public RuleCall getMethodMethodParserRuleCall_1_0() { return cMethodMethodParserRuleCall_1_0; }
		
		//workflow=Workflow
		public Assignment getWorkflowAssignment_2() { return cWorkflowAssignment_2; }
		
		//Workflow
		public RuleCall getWorkflowWorkflowParserRuleCall_2_0() { return cWorkflowWorkflowParserRuleCall_2_0; }
	}
	public class WorkflowElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.arsene.workflow.Workflow.Workflow");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWorkflowKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cTypeKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cTypeAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cTypeWorkflowTypeEnumRuleCall_2_1_0 = (RuleCall)cTypeAssignment_2_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cStepsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cStepsStepParserRuleCall_4_0 = (RuleCall)cStepsAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cExecuteAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cExecuteExecuteParserRuleCall_6_0 = (RuleCall)cExecuteAssignment_6.eContents().get(0);
		
		////------------------------------  WORKFLOW  -----------------------------------
		//Workflow:
		//    'Workflow' name=ID ('type:' type=WorkflowType)?
		//    '{'
		//    steps+=Step*
		//    '}'
		//    execute=Execute;
		@Override public ParserRule getRule() { return rule; }
		
		//'Workflow' name=ID ('type:' type=WorkflowType)?
		//'{'
		//steps+=Step*
		//'}'
		//execute=Execute
		public Group getGroup() { return cGroup; }
		
		//'Workflow'
		public Keyword getWorkflowKeyword_0() { return cWorkflowKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//('type:' type=WorkflowType)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'type:'
		public Keyword getTypeKeyword_2_0() { return cTypeKeyword_2_0; }
		
		//type=WorkflowType
		public Assignment getTypeAssignment_2_1() { return cTypeAssignment_2_1; }
		
		//WorkflowType
		public RuleCall getTypeWorkflowTypeEnumRuleCall_2_1_0() { return cTypeWorkflowTypeEnumRuleCall_2_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//steps+=Step*
		public Assignment getStepsAssignment_4() { return cStepsAssignment_4; }
		
		//Step
		public RuleCall getStepsStepParserRuleCall_4_0() { return cStepsStepParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
		
		//execute=Execute
		public Assignment getExecuteAssignment_6() { return cExecuteAssignment_6; }
		
		//Execute
		public RuleCall getExecuteExecuteParserRuleCall_6_0() { return cExecuteExecuteParserRuleCall_6_0; }
	}
	public class StepElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.arsene.workflow.Workflow.Step");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStepKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameSTRINGTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cBodyAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cBodyBlockParserRuleCall_2_0 = (RuleCall)cBodyAssignment_2.eContents().get(0);
		
		//Step:
		//    'step' name=STRING body=Block;
		@Override public ParserRule getRule() { return rule; }
		
		//'step' name=STRING body=Block
		public Group getGroup() { return cGroup; }
		
		//'step'
		public Keyword getStepKeyword_0() { return cStepKeyword_0; }
		
		//name=STRING
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_1_0() { return cNameSTRINGTerminalRuleCall_1_0; }
		
		//body=Block
		public Assignment getBodyAssignment_2() { return cBodyAssignment_2; }
		
		//Block
		public RuleCall getBodyBlockParserRuleCall_2_0() { return cBodyBlockParserRuleCall_2_0; }
	}
	public class ExecuteElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.arsene.workflow.Workflow.Execute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExecuteKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cWorkflowAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cWorkflowWorkflowCrossReference_1_0 = (CrossReference)cWorkflowAssignment_1.eContents().get(0);
		private final RuleCall cWorkflowWorkflowIDTerminalRuleCall_1_0_1 = (RuleCall)cWorkflowWorkflowCrossReference_1_0.eContents().get(1);
		private final Keyword cLeftParenthesisRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Execute:
		//    'Execute' workflow=[Workflow] '()';
		@Override public ParserRule getRule() { return rule; }
		
		//'Execute' workflow=[Workflow] '()'
		public Group getGroup() { return cGroup; }
		
		//'Execute'
		public Keyword getExecuteKeyword_0() { return cExecuteKeyword_0; }
		
		//workflow=[Workflow]
		public Assignment getWorkflowAssignment_1() { return cWorkflowAssignment_1; }
		
		//[Workflow]
		public CrossReference getWorkflowWorkflowCrossReference_1_0() { return cWorkflowWorkflowCrossReference_1_0; }
		
		//ID
		public RuleCall getWorkflowWorkflowIDTerminalRuleCall_1_0_1() { return cWorkflowWorkflowIDTerminalRuleCall_1_0_1; }
		
		//'()'
		public Keyword getLeftParenthesisRightParenthesisKeyword_2() { return cLeftParenthesisRightParenthesisKeyword_2; }
	}
	public class MethodElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.arsene.workflow.Workflow.Method");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFunctionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2_0_0 = (Keyword)cGroup_2_0.eContents().get(0);
		private final Group cGroup_2_0_1 = (Group)cGroup_2_0.eContents().get(1);
		private final Assignment cParamsAssignment_2_0_1_0 = (Assignment)cGroup_2_0_1.eContents().get(0);
		private final RuleCall cParamsVariableParserRuleCall_2_0_1_0_0 = (RuleCall)cParamsAssignment_2_0_1_0.eContents().get(0);
		private final Group cGroup_2_0_1_1 = (Group)cGroup_2_0_1.eContents().get(1);
		private final Keyword cCommaKeyword_2_0_1_1_0 = (Keyword)cGroup_2_0_1_1.eContents().get(0);
		private final Assignment cParamsAssignment_2_0_1_1_1 = (Assignment)cGroup_2_0_1_1.eContents().get(1);
		private final RuleCall cParamsVariableParserRuleCall_2_0_1_1_1_0 = (RuleCall)cParamsAssignment_2_0_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_0_2 = (Keyword)cGroup_2_0.eContents().get(2);
		private final Keyword cLeftParenthesisRightParenthesisKeyword_2_1 = (Keyword)cAlternatives_2.eContents().get(1);
		private final Assignment cBodyAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cBodyBlockParserRuleCall_3_0 = (RuleCall)cBodyAssignment_3.eContents().get(0);
		
		////------------------------------  METHOD  -------------------------------------
		//Method:
		//    'function' name=ID
		//    ('(' (params+=Variable (',' params+=Variable)*)? ')' | '()')
		//    body=Block;
		@Override public ParserRule getRule() { return rule; }
		
		//'function' name=ID
		//('(' (params+=Variable (',' params+=Variable)*)? ')' | '()')
		//body=Block
		public Group getGroup() { return cGroup; }
		
		//'function'
		public Keyword getFunctionKeyword_0() { return cFunctionKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//('(' (params+=Variable (',' params+=Variable)*)? ')' | '()')
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//'(' (params+=Variable (',' params+=Variable)*)? ')'
		public Group getGroup_2_0() { return cGroup_2_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_0_0() { return cLeftParenthesisKeyword_2_0_0; }
		
		//(params+=Variable (',' params+=Variable)*)?
		public Group getGroup_2_0_1() { return cGroup_2_0_1; }
		
		//params+=Variable
		public Assignment getParamsAssignment_2_0_1_0() { return cParamsAssignment_2_0_1_0; }
		
		//Variable
		public RuleCall getParamsVariableParserRuleCall_2_0_1_0_0() { return cParamsVariableParserRuleCall_2_0_1_0_0; }
		
		//(',' params+=Variable)*
		public Group getGroup_2_0_1_1() { return cGroup_2_0_1_1; }
		
		//','
		public Keyword getCommaKeyword_2_0_1_1_0() { return cCommaKeyword_2_0_1_1_0; }
		
		//params+=Variable
		public Assignment getParamsAssignment_2_0_1_1_1() { return cParamsAssignment_2_0_1_1_1; }
		
		//Variable
		public RuleCall getParamsVariableParserRuleCall_2_0_1_1_1_0() { return cParamsVariableParserRuleCall_2_0_1_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_0_2() { return cRightParenthesisKeyword_2_0_2; }
		
		//'()'
		public Keyword getLeftParenthesisRightParenthesisKeyword_2_1() { return cLeftParenthesisRightParenthesisKeyword_2_1; }
		
		//body=Block
		public Assignment getBodyAssignment_3() { return cBodyAssignment_3; }
		
		//Block
		public RuleCall getBodyBlockParserRuleCall_3_0() { return cBodyBlockParserRuleCall_3_0; }
	}
	public class BlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.arsene.workflow.Workflow.Block");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBlockAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cStatementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStatementsStatementParserRuleCall_2_0 = (RuleCall)cStatementsAssignment_2.eContents().get(0);
		private final Assignment cReturnStatementAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cReturnStatementReturnParserRuleCall_3_0 = (RuleCall)cReturnStatementAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Block:
		//    {Block}'{'
		//        statements+=Statement*
		//        returnStatement=Return?
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Block}'{'
		//    statements+=Statement*
		//    returnStatement=Return?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//{Block}
		public Action getBlockAction_0() { return cBlockAction_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//statements+=Statement*
		public Assignment getStatementsAssignment_2() { return cStatementsAssignment_2; }
		
		//Statement
		public RuleCall getStatementsStatementParserRuleCall_2_0() { return cStatementsStatementParserRuleCall_2_0; }
		
		//returnStatement=Return?
		public Assignment getReturnStatementAssignment_3() { return cReturnStatementAssignment_3; }
		
		//Return
		public RuleCall getReturnStatementReturnParserRuleCall_3_0() { return cReturnStatementReturnParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class ReturnElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.arsene.workflow.Workflow.Return");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cReturnKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		
		//Return:
		//    'return' expression=Expression;
		@Override public ParserRule getRule() { return rule; }
		
		//'return' expression=Expression
		public Group getGroup() { return cGroup; }
		
		//'return'
		public Keyword getReturnKeyword_0() { return cReturnKeyword_0; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_1_0() { return cExpressionExpressionParserRuleCall_1_0; }
	}
	public class PrimitiveTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.arsene.workflow.Workflow.PrimitiveType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Alternatives cTypeNameAlternatives_0_0 = (Alternatives)cTypeNameAssignment_0.eContents().get(0);
		private final Keyword cTypeNameBooleanKeyword_0_0_0 = (Keyword)cTypeNameAlternatives_0_0.eContents().get(0);
		private final Keyword cTypeNameNumberKeyword_0_0_1 = (Keyword)cTypeNameAlternatives_0_0.eContents().get(1);
		private final Keyword cTypeNameStringKeyword_0_0_2 = (Keyword)cTypeNameAlternatives_0_0.eContents().get(2);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//PrimitiveType:
		//    typeName=('boolean' | 'number' | 'string') ':' name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//typeName=('boolean' | 'number' | 'string') ':' name=ID
		public Group getGroup() { return cGroup; }
		
		//typeName=('boolean' | 'number' | 'string')
		public Assignment getTypeNameAssignment_0() { return cTypeNameAssignment_0; }
		
		//('boolean' | 'number' | 'string')
		public Alternatives getTypeNameAlternatives_0_0() { return cTypeNameAlternatives_0_0; }
		
		//'boolean'
		public Keyword getTypeNameBooleanKeyword_0_0_0() { return cTypeNameBooleanKeyword_0_0_0; }
		
		//'number'
		public Keyword getTypeNameNumberKeyword_0_0_1() { return cTypeNameNumberKeyword_0_0_1; }
		
		//'string'
		public Keyword getTypeNameStringKeyword_0_0_2() { return cTypeNameStringKeyword_0_0_2; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
	}
	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.arsene.workflow.Workflow.Statement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cVariablAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cVariablVariableParserRuleCall_0_0 = (RuleCall)cVariablAssignment_0.eContents().get(0);
		private final Assignment cPrintAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cPrintDisplayParserRuleCall_1_0 = (RuleCall)cPrintAssignment_1.eContents().get(0);
		private final Assignment cAssignmentAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cAssignmentAssignmentParserRuleCall_2_0 = (RuleCall)cAssignmentAssignment_2.eContents().get(0);
		private final Assignment cIfStatementAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cIfStatementIfStatementParserRuleCall_3_0 = (RuleCall)cIfStatementAssignment_3.eContents().get(0);
		private final Assignment cLoopAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final RuleCall cLoopLoopStatementParserRuleCall_4_0 = (RuleCall)cLoopAssignment_4.eContents().get(0);
		private final Assignment cMethodInvocationAssignment_5 = (Assignment)cAlternatives.eContents().get(5);
		private final RuleCall cMethodInvocationMethodInvocationParserRuleCall_5_0 = (RuleCall)cMethodInvocationAssignment_5.eContents().get(0);
		
		//// ------------------------------------------ STATEMENT--------------------------------------------
		//Statement:
		//    variabl=Variable |
		//    print=Display |
		//    assignment=Assignment |
		//    ifStatement=IfStatement |
		//    loop=LoopStatement |
		//    methodInvocation=MethodInvocation;
		@Override public ParserRule getRule() { return rule; }
		
		//variabl=Variable |
		//print=Display |
		//assignment=Assignment |
		//ifStatement=IfStatement |
		//loop=LoopStatement |
		//methodInvocation=MethodInvocation
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//variabl=Variable
		public Assignment getVariablAssignment_0() { return cVariablAssignment_0; }
		
		//Variable
		public RuleCall getVariablVariableParserRuleCall_0_0() { return cVariablVariableParserRuleCall_0_0; }
		
		//print=Display
		public Assignment getPrintAssignment_1() { return cPrintAssignment_1; }
		
		//Display
		public RuleCall getPrintDisplayParserRuleCall_1_0() { return cPrintDisplayParserRuleCall_1_0; }
		
		//assignment=Assignment
		public Assignment getAssignmentAssignment_2() { return cAssignmentAssignment_2; }
		
		//Assignment
		public RuleCall getAssignmentAssignmentParserRuleCall_2_0() { return cAssignmentAssignmentParserRuleCall_2_0; }
		
		//ifStatement=IfStatement
		public Assignment getIfStatementAssignment_3() { return cIfStatementAssignment_3; }
		
		//IfStatement
		public RuleCall getIfStatementIfStatementParserRuleCall_3_0() { return cIfStatementIfStatementParserRuleCall_3_0; }
		
		//loop=LoopStatement
		public Assignment getLoopAssignment_4() { return cLoopAssignment_4; }
		
		//LoopStatement
		public RuleCall getLoopLoopStatementParserRuleCall_4_0() { return cLoopLoopStatementParserRuleCall_4_0; }
		
		//methodInvocation=MethodInvocation
		public Assignment getMethodInvocationAssignment_5() { return cMethodInvocationAssignment_5; }
		
		//MethodInvocation
		public RuleCall getMethodInvocationMethodInvocationParserRuleCall_5_0() { return cMethodInvocationMethodInvocationParserRuleCall_5_0; }
	}
	public class MethodInvocationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.arsene.workflow.Workflow.MethodInvocation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMethodInvocationAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cCallKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cInvokedMethodAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final CrossReference cInvokedMethodMethodCrossReference_2_0_0 = (CrossReference)cInvokedMethodAssignment_2_0.eContents().get(0);
		private final RuleCall cInvokedMethodMethodIDTerminalRuleCall_2_0_0_1 = (RuleCall)cInvokedMethodMethodCrossReference_2_0_0.eContents().get(1);
		private final Assignment cServiceAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cServiceServiceParserRuleCall_2_1_0 = (RuleCall)cServiceAssignment_2_1.eContents().get(0);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cAlternatives_3.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3_0_0 = (Keyword)cGroup_3_0.eContents().get(0);
		private final Group cGroup_3_0_1 = (Group)cGroup_3_0.eContents().get(1);
		private final Assignment cArgsAssignment_3_0_1_0 = (Assignment)cGroup_3_0_1.eContents().get(0);
		private final RuleCall cArgsExpressionParserRuleCall_3_0_1_0_0 = (RuleCall)cArgsAssignment_3_0_1_0.eContents().get(0);
		private final Group cGroup_3_0_1_1 = (Group)cGroup_3_0_1.eContents().get(1);
		private final Keyword cCommaKeyword_3_0_1_1_0 = (Keyword)cGroup_3_0_1_1.eContents().get(0);
		private final Assignment cArgsAssignment_3_0_1_1_1 = (Assignment)cGroup_3_0_1_1.eContents().get(1);
		private final RuleCall cArgsExpressionParserRuleCall_3_0_1_1_1_0 = (RuleCall)cArgsAssignment_3_0_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_0_2 = (Keyword)cGroup_3_0.eContents().get(2);
		private final Keyword cLeftParenthesisRightParenthesisKeyword_3_1 = (Keyword)cAlternatives_3.eContents().get(1);
		
		//// -------------------------------------- METHOD INVOCATION ----------------------------------------
		//MethodInvocation returns Expression:
		//    {MethodInvocation}'call' (invokedMethod=[Method] | service=Service) ('(' (args+=Expression (','
		//    args+=Expression)*)? ')' | '()');
		@Override public ParserRule getRule() { return rule; }
		
		//{MethodInvocation}'call' (invokedMethod=[Method] | service=Service) ('(' (args+=Expression (','
		//args+=Expression)*)? ')' | '()')
		public Group getGroup() { return cGroup; }
		
		//{MethodInvocation}
		public Action getMethodInvocationAction_0() { return cMethodInvocationAction_0; }
		
		//'call'
		public Keyword getCallKeyword_1() { return cCallKeyword_1; }
		
		//(invokedMethod=[Method] | service=Service)
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//invokedMethod=[Method]
		public Assignment getInvokedMethodAssignment_2_0() { return cInvokedMethodAssignment_2_0; }
		
		//[Method]
		public CrossReference getInvokedMethodMethodCrossReference_2_0_0() { return cInvokedMethodMethodCrossReference_2_0_0; }
		
		//ID
		public RuleCall getInvokedMethodMethodIDTerminalRuleCall_2_0_0_1() { return cInvokedMethodMethodIDTerminalRuleCall_2_0_0_1; }
		
		//service=Service
		public Assignment getServiceAssignment_2_1() { return cServiceAssignment_2_1; }
		
		//Service
		public RuleCall getServiceServiceParserRuleCall_2_1_0() { return cServiceServiceParserRuleCall_2_1_0; }
		
		//('(' (args+=Expression (','
		//   args+=Expression)*)? ')' | '()')
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//'(' (args+=Expression (','
		//    args+=Expression)*)? ')'
		public Group getGroup_3_0() { return cGroup_3_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3_0_0() { return cLeftParenthesisKeyword_3_0_0; }
		
		//(args+=Expression (','
		//   args+=Expression)*)?
		public Group getGroup_3_0_1() { return cGroup_3_0_1; }
		
		//args+=Expression
		public Assignment getArgsAssignment_3_0_1_0() { return cArgsAssignment_3_0_1_0; }
		
		//Expression
		public RuleCall getArgsExpressionParserRuleCall_3_0_1_0_0() { return cArgsExpressionParserRuleCall_3_0_1_0_0; }
		
		//(','
		//   args+=Expression)*
		public Group getGroup_3_0_1_1() { return cGroup_3_0_1_1; }
		
		//','
		public Keyword getCommaKeyword_3_0_1_1_0() { return cCommaKeyword_3_0_1_1_0; }
		
		//args+=Expression
		public Assignment getArgsAssignment_3_0_1_1_1() { return cArgsAssignment_3_0_1_1_1; }
		
		//Expression
		public RuleCall getArgsExpressionParserRuleCall_3_0_1_1_1_0() { return cArgsExpressionParserRuleCall_3_0_1_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3_0_2() { return cRightParenthesisKeyword_3_0_2; }
		
		//'()'
		public Keyword getLeftParenthesisRightParenthesisKeyword_3_1() { return cLeftParenthesisRightParenthesisKeyword_3_1; }
	}
	public class ServiceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.arsene.workflow.Workflow.Service");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cServiceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//// ( variable=[Variable] '=')?
		////--------------------------------  SERVICE  --------------------------------
		//Service:
		//    'service' name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'service' name=ID
		public Group getGroup() { return cGroup; }
		
		//'service'
		public Keyword getServiceKeyword_0() { return cServiceKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class IfStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.arsene.workflow.Workflow.IfStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionExpressionParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cThenBlockAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cThenBlockIfBlockParserRuleCall_4_0 = (RuleCall)cThenBlockAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cElseKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cElseBlockAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cElseBlockIfBlockParserRuleCall_5_1_0 = (RuleCall)cElseBlockAssignment_5_1.eContents().get(0);
		
		////------------------------------- LOOP and IF STATEMENT --------------------------------------------
		//IfStatement:
		//    'if' '(' expression=Expression ')' thenBlock=IfBlock
		//    (=>'else' elseBlock=IfBlock)?;
		@Override public ParserRule getRule() { return rule; }
		
		//'if' '(' expression=Expression ')' thenBlock=IfBlock
		//(=>'else' elseBlock=IfBlock)?
		public Group getGroup() { return cGroup; }
		
		//'if'
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_2_0() { return cExpressionExpressionParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
		
		//thenBlock=IfBlock
		public Assignment getThenBlockAssignment_4() { return cThenBlockAssignment_4; }
		
		//IfBlock
		public RuleCall getThenBlockIfBlockParserRuleCall_4_0() { return cThenBlockIfBlockParserRuleCall_4_0; }
		
		//(=>'else' elseBlock=IfBlock)?
		public Group getGroup_5() { return cGroup_5; }
		
		//=>'else'
		public Keyword getElseKeyword_5_0() { return cElseKeyword_5_0; }
		
		//elseBlock=IfBlock
		public Assignment getElseBlockAssignment_5_1() { return cElseBlockAssignment_5_1; }
		
		//IfBlock
		public RuleCall getElseBlockIfBlockParserRuleCall_5_1_0() { return cElseBlockIfBlockParserRuleCall_5_1_0; }
	}
	public class IfBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.arsene.workflow.Workflow.IfBlock");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cStatementsAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cStatementsStatementParserRuleCall_0_0 = (RuleCall)cStatementsAssignment_0.eContents().get(0);
		private final RuleCall cBlockParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//IfBlock returns Block:
		//    statements+=Statement
		//    | Block;
		@Override public ParserRule getRule() { return rule; }
		
		//statements+=Statement
		//| Block
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//statements+=Statement
		public Assignment getStatementsAssignment_0() { return cStatementsAssignment_0; }
		
		//Statement
		public RuleCall getStatementsStatementParserRuleCall_0_0() { return cStatementsStatementParserRuleCall_0_0; }
		
		//Block
		public RuleCall getBlockParserRuleCall_1() { return cBlockParserRuleCall_1; }
	}
	public class LoopStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.arsene.workflow.Workflow.LoopStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLoopKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cIfKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cExpressionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cExpressionExpressionParserRuleCall_3_0 = (RuleCall)cExpressionAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cThenBlockAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cThenBlockIfBlockParserRuleCall_5_0 = (RuleCall)cThenBlockAssignment_5.eContents().get(0);
		
		//LoopStatement:
		//    'loop:' 'if' '(' expression=Expression ')' thenBlock=IfBlock;
		@Override public ParserRule getRule() { return rule; }
		
		//'loop:' 'if' '(' expression=Expression ')' thenBlock=IfBlock
		public Group getGroup() { return cGroup; }
		
		//'loop:'
		public Keyword getLoopKeyword_0() { return cLoopKeyword_0; }
		
		//'if'
		public Keyword getIfKeyword_1() { return cIfKeyword_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_3() { return cExpressionAssignment_3; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_3_0() { return cExpressionExpressionParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
		
		//thenBlock=IfBlock
		public Assignment getThenBlockAssignment_5() { return cThenBlockAssignment_5; }
		
		//IfBlock
		public RuleCall getThenBlockIfBlockParserRuleCall_5_0() { return cThenBlockIfBlockParserRuleCall_5_0; }
	}
	public class VariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.arsene.workflow.Workflow.Variable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cAlternatives_0.eContents().get(0);
		private final Assignment cTypeNameAssignment_0_0_0 = (Assignment)cGroup_0_0.eContents().get(0);
		private final Alternatives cTypeNameAlternatives_0_0_0_0 = (Alternatives)cTypeNameAssignment_0_0_0.eContents().get(0);
		private final Keyword cTypeNameBooleanKeyword_0_0_0_0_0 = (Keyword)cTypeNameAlternatives_0_0_0_0.eContents().get(0);
		private final Keyword cTypeNameNumberKeyword_0_0_0_0_1 = (Keyword)cTypeNameAlternatives_0_0_0_0.eContents().get(1);
		private final Keyword cTypeNameStringKeyword_0_0_0_0_2 = (Keyword)cTypeNameAlternatives_0_0_0_0.eContents().get(2);
		private final Keyword cColonKeyword_0_0_1 = (Keyword)cGroup_0_0.eContents().get(1);
		private final Assignment cNameAssignment_0_0_2 = (Assignment)cGroup_0_0.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_0_0_2_0 = (RuleCall)cNameAssignment_0_0_2.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cAlternatives_0.eContents().get(1);
		private final Keyword cDefineKeyword_0_1_0 = (Keyword)cGroup_0_1.eContents().get(0);
		private final RuleCall cVariableTypeParserRuleCall_0_1_1 = (RuleCall)cGroup_0_1.eContents().get(1);
		private final Assignment cNameAssignment_0_1_2 = (Assignment)cGroup_0_1.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_0_1_2_0 = (RuleCall)cNameAssignment_0_1_2.eContents().get(0);
		private final Group cGroup_0_1_3 = (Group)cGroup_0_1.eContents().get(3);
		private final Assignment cArrayAssignment_0_1_3_0 = (Assignment)cGroup_0_1_3.eContents().get(0);
		private final Keyword cArrayLeftSquareBracketKeyword_0_1_3_0_0 = (Keyword)cArrayAssignment_0_1_3_0.eContents().get(0);
		private final Assignment cLengthAssignment_0_1_3_1 = (Assignment)cGroup_0_1_3.eContents().get(1);
		private final RuleCall cLengthINTTerminalRuleCall_0_1_3_1_0 = (RuleCall)cLengthAssignment_0_1_3_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_0_1_3_2 = (Keyword)cGroup_0_1_3.eContents().get(2);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final Assignment cExpressionAssignment_1_1_0 = (Assignment)cAlternatives_1_1.eContents().get(0);
		private final RuleCall cExpressionExpressionParserRuleCall_1_1_0_0 = (RuleCall)cExpressionAssignment_1_1_0.eContents().get(0);
		private final Assignment cMethodInvocationAssignment_1_1_1 = (Assignment)cAlternatives_1_1.eContents().get(1);
		private final RuleCall cMethodInvocationMethodInvocationParserRuleCall_1_1_1_0 = (RuleCall)cMethodInvocationAssignment_1_1_1.eContents().get(0);
		
		//// --------------------------------VARIABLE and ASSIGNEMENT --------------------------------------------
		//Variable:
		//    ((typeName=('boolean' | 'number' | 'string') ':' name=ID)|('Define'? VariableType name=ID (array?='[' (length=INT)? ']')?)) ('=' ((expression=Expression) | (methodInvocation=MethodInvocation)))?;
		@Override public ParserRule getRule() { return rule; }
		
		//((typeName=('boolean' | 'number' | 'string') ':' name=ID)|('Define'? VariableType name=ID (array?='[' (length=INT)? ']')?)) ('=' ((expression=Expression) | (methodInvocation=MethodInvocation)))?
		public Group getGroup() { return cGroup; }
		
		//((typeName=('boolean' | 'number' | 'string') ':' name=ID)|('Define'? VariableType name=ID (array?='[' (length=INT)? ']')?))
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//(typeName=('boolean' | 'number' | 'string') ':' name=ID)
		public Group getGroup_0_0() { return cGroup_0_0; }
		
		//typeName=('boolean' | 'number' | 'string')
		public Assignment getTypeNameAssignment_0_0_0() { return cTypeNameAssignment_0_0_0; }
		
		//('boolean' | 'number' | 'string')
		public Alternatives getTypeNameAlternatives_0_0_0_0() { return cTypeNameAlternatives_0_0_0_0; }
		
		//'boolean'
		public Keyword getTypeNameBooleanKeyword_0_0_0_0_0() { return cTypeNameBooleanKeyword_0_0_0_0_0; }
		
		//'number'
		public Keyword getTypeNameNumberKeyword_0_0_0_0_1() { return cTypeNameNumberKeyword_0_0_0_0_1; }
		
		//'string'
		public Keyword getTypeNameStringKeyword_0_0_0_0_2() { return cTypeNameStringKeyword_0_0_0_0_2; }
		
		//':'
		public Keyword getColonKeyword_0_0_1() { return cColonKeyword_0_0_1; }
		
		//name=ID
		public Assignment getNameAssignment_0_0_2() { return cNameAssignment_0_0_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0_2_0() { return cNameIDTerminalRuleCall_0_0_2_0; }
		
		//('Define'? VariableType name=ID (array?='[' (length=INT)? ']')?)
		public Group getGroup_0_1() { return cGroup_0_1; }
		
		//'Define'?
		public Keyword getDefineKeyword_0_1_0() { return cDefineKeyword_0_1_0; }
		
		//VariableType
		public RuleCall getVariableTypeParserRuleCall_0_1_1() { return cVariableTypeParserRuleCall_0_1_1; }
		
		//name=ID
		public Assignment getNameAssignment_0_1_2() { return cNameAssignment_0_1_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_1_2_0() { return cNameIDTerminalRuleCall_0_1_2_0; }
		
		//(array?='[' (length=INT)? ']')?
		public Group getGroup_0_1_3() { return cGroup_0_1_3; }
		
		//array?='['
		public Assignment getArrayAssignment_0_1_3_0() { return cArrayAssignment_0_1_3_0; }
		
		//'['
		public Keyword getArrayLeftSquareBracketKeyword_0_1_3_0_0() { return cArrayLeftSquareBracketKeyword_0_1_3_0_0; }
		
		//(length=INT)?
		public Assignment getLengthAssignment_0_1_3_1() { return cLengthAssignment_0_1_3_1; }
		
		//INT
		public RuleCall getLengthINTTerminalRuleCall_0_1_3_1_0() { return cLengthINTTerminalRuleCall_0_1_3_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_0_1_3_2() { return cRightSquareBracketKeyword_0_1_3_2; }
		
		//('=' ((expression=Expression) | (methodInvocation=MethodInvocation)))?
		public Group getGroup_1() { return cGroup_1; }
		
		//'='
		public Keyword getEqualsSignKeyword_1_0() { return cEqualsSignKeyword_1_0; }
		
		//((expression=Expression) | (methodInvocation=MethodInvocation))
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }
		
		//(expression=Expression)
		public Assignment getExpressionAssignment_1_1_0() { return cExpressionAssignment_1_1_0; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_1_1_0_0() { return cExpressionExpressionParserRuleCall_1_1_0_0; }
		
		//(methodInvocation=MethodInvocation)
		public Assignment getMethodInvocationAssignment_1_1_1() { return cMethodInvocationAssignment_1_1_1; }
		
		//MethodInvocation
		public RuleCall getMethodInvocationMethodInvocationParserRuleCall_1_1_1_0() { return cMethodInvocationMethodInvocationParserRuleCall_1_1_1_0; }
	}
	public class VariableTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.arsene.workflow.Workflow.VariableType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cVarKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cArtifactKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cEventKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//VariableType:
		//    'var' | 'Artifact' | 'Event';
		@Override public ParserRule getRule() { return rule; }
		
		//'var' | 'Artifact' | 'Event'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'var'
		public Keyword getVarKeyword_0() { return cVarKeyword_0; }
		
		//'Artifact'
		public Keyword getArtifactKeyword_1() { return cArtifactKeyword_1; }
		
		//'Event'
		public Keyword getEventKeyword_2() { return cEventKeyword_2; }
	}
	public class ParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.arsene.workflow.Workflow.Parameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cVariableTypeParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Parameter:
		//    VariableType name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//VariableType name=ID
		public Group getGroup() { return cGroup; }
		
		//VariableType
		public RuleCall getVariableTypeParserRuleCall_0() { return cVariableTypeParserRuleCall_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class DisplayElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.arsene.workflow.Workflow.Display");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPrintKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionExpressionParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Display:
		//    'print' '(' expression=Expression ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'print' '(' expression=Expression ')'
		public Group getGroup() { return cGroup; }
		
		//'print'
		public Keyword getPrintKeyword_0() { return cPrintKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_2_0() { return cExpressionExpressionParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class AssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.arsene.workflow.Workflow.Assignment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVariableAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cVariableVariableCrossReference_0_0 = (CrossReference)cVariableAssignment_0.eContents().get(0);
		private final RuleCall cVariableVariableIDTerminalRuleCall_0_0_1 = (RuleCall)cVariableVariableCrossReference_0_0.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cExpressionAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cExpressionExpressionParserRuleCall_2_0_0 = (RuleCall)cExpressionAssignment_2_0.eContents().get(0);
		private final Assignment cMethodInvocationAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cMethodInvocationMethodInvocationParserRuleCall_2_1_0 = (RuleCall)cMethodInvocationAssignment_2_1.eContents().get(0);
		
		//Assignment:
		//    variable=[Variable] '=' ((expression=Expression) | (methodInvocation=MethodInvocation));
		@Override public ParserRule getRule() { return rule; }
		
		//variable=[Variable] '=' ((expression=Expression) | (methodInvocation=MethodInvocation))
		public Group getGroup() { return cGroup; }
		
		//variable=[Variable]
		public Assignment getVariableAssignment_0() { return cVariableAssignment_0; }
		
		//[Variable]
		public CrossReference getVariableVariableCrossReference_0_0() { return cVariableVariableCrossReference_0_0; }
		
		//ID
		public RuleCall getVariableVariableIDTerminalRuleCall_0_0_1() { return cVariableVariableIDTerminalRuleCall_0_0_1; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//((expression=Expression) | (methodInvocation=MethodInvocation))
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//(expression=Expression)
		public Assignment getExpressionAssignment_2_0() { return cExpressionAssignment_2_0; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_2_0_0() { return cExpressionExpressionParserRuleCall_2_0_0; }
		
		//(methodInvocation=MethodInvocation)
		public Assignment getMethodInvocationAssignment_2_1() { return cMethodInvocationAssignment_2_1; }
		
		//MethodInvocation
		public RuleCall getMethodInvocationMethodInvocationParserRuleCall_2_1_0() { return cMethodInvocationMethodInvocationParserRuleCall_2_1_0; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.arsene.workflow.Workflow.Expression");
		private final RuleCall cOrParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		// // Right associativity
		////--- Arithmetic/Logic expressions --------------------
		//// These are inspired by the solution of Lorenzo Bettini
		//// the author of "Implementing Domain-Specific Languages with Xtext and Xtend"
		//// --------------------------------------------------------------------------------------------------
		//Expression:
		//    Or;
		@Override public ParserRule getRule() { return rule; }
		
		//Or
		public RuleCall getOrParserRuleCall() { return cOrParserRuleCall; }
	}
	public class OrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.arsene.workflow.Workflow.Or");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAndParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOrLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cOrKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightAndParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Or returns Expression:
		//    And ({Or.left=current} "or" right=And)*;
		@Override public ParserRule getRule() { return rule; }
		
		//And ({Or.left=current} "or" right=And)*
		public Group getGroup() { return cGroup; }
		
		//And
		public RuleCall getAndParserRuleCall_0() { return cAndParserRuleCall_0; }
		
		//({Or.left=current} "or" right=And)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Or.left=current}
		public Action getOrLeftAction_1_0() { return cOrLeftAction_1_0; }
		
		//"or"
		public Keyword getOrKeyword_1_1() { return cOrKeyword_1_1; }
		
		//right=And
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//And
		public RuleCall getRightAndParserRuleCall_1_2_0() { return cRightAndParserRuleCall_1_2_0; }
	}
	public class AndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.arsene.workflow.Workflow.And");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cEqualityParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cAndLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cAndKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightEqualityParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//And returns Expression:
		//    Equality ({And.left=current} "and" right=Equality)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Equality ({And.left=current} "and" right=Equality)*
		public Group getGroup() { return cGroup; }
		
		//Equality
		public RuleCall getEqualityParserRuleCall_0() { return cEqualityParserRuleCall_0; }
		
		//({And.left=current} "and" right=Equality)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{And.left=current}
		public Action getAndLeftAction_1_0() { return cAndLeftAction_1_0; }
		
		//"and"
		public Keyword getAndKeyword_1_1() { return cAndKeyword_1_1; }
		
		//right=Equality
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//Equality
		public RuleCall getRightEqualityParserRuleCall_1_2_0() { return cRightEqualityParserRuleCall_1_2_0; }
	}
	public class EqualityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.arsene.workflow.Workflow.Equality");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cComparisonParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cEqualityLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOpAlternatives_1_1_0 = (Alternatives)cOpAssignment_1_1.eContents().get(0);
		private final Keyword cOpEqualsSignEqualsSignKeyword_1_1_0_0 = (Keyword)cOpAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOpExclamationMarkEqualsSignKeyword_1_1_0_1 = (Keyword)cOpAlternatives_1_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightComparisonParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Equality returns Expression:
		//    Comparison ({Equality.left=current} op=("==" | "!=")
		//    right=Comparison)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Comparison ({Equality.left=current} op=("==" | "!=")
		//right=Comparison)*
		public Group getGroup() { return cGroup; }
		
		//Comparison
		public RuleCall getComparisonParserRuleCall_0() { return cComparisonParserRuleCall_0; }
		
		//({Equality.left=current} op=("==" | "!=")
		//   right=Comparison)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Equality.left=current}
		public Action getEqualityLeftAction_1_0() { return cEqualityLeftAction_1_0; }
		
		//op=("==" | "!=")
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//("==" | "!=")
		public Alternatives getOpAlternatives_1_1_0() { return cOpAlternatives_1_1_0; }
		
		//"=="
		public Keyword getOpEqualsSignEqualsSignKeyword_1_1_0_0() { return cOpEqualsSignEqualsSignKeyword_1_1_0_0; }
		
		//"!="
		public Keyword getOpExclamationMarkEqualsSignKeyword_1_1_0_1() { return cOpExclamationMarkEqualsSignKeyword_1_1_0_1; }
		
		//right=Comparison
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//Comparison
		public RuleCall getRightComparisonParserRuleCall_1_2_0() { return cRightComparisonParserRuleCall_1_2_0; }
	}
	public class ComparisonElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.arsene.workflow.Workflow.Comparison");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPlusOrMinusParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cComparisonLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOpAlternatives_1_1_0 = (Alternatives)cOpAssignment_1_1.eContents().get(0);
		private final Keyword cOpGreaterThanSignEqualsSignKeyword_1_1_0_0 = (Keyword)cOpAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOpLessThanSignEqualsSignKeyword_1_1_0_1 = (Keyword)cOpAlternatives_1_1_0.eContents().get(1);
		private final Keyword cOpGreaterThanSignKeyword_1_1_0_2 = (Keyword)cOpAlternatives_1_1_0.eContents().get(2);
		private final Keyword cOpLessThanSignKeyword_1_1_0_3 = (Keyword)cOpAlternatives_1_1_0.eContents().get(3);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightPlusOrMinusParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Comparison returns Expression:
		//    PlusOrMinus ({Comparison.left=current} op=(">=" | "<=" | ">" | "<")
		//    right=PlusOrMinus)*;
		@Override public ParserRule getRule() { return rule; }
		
		//PlusOrMinus ({Comparison.left=current} op=(">=" | "<=" | ">" | "<")
		//right=PlusOrMinus)*
		public Group getGroup() { return cGroup; }
		
		//PlusOrMinus
		public RuleCall getPlusOrMinusParserRuleCall_0() { return cPlusOrMinusParserRuleCall_0; }
		
		//({Comparison.left=current} op=(">=" | "<=" | ">" | "<")
		//   right=PlusOrMinus)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Comparison.left=current}
		public Action getComparisonLeftAction_1_0() { return cComparisonLeftAction_1_0; }
		
		//op=(">=" | "<=" | ">" | "<")
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//(">=" | "<=" | ">" | "<")
		public Alternatives getOpAlternatives_1_1_0() { return cOpAlternatives_1_1_0; }
		
		//">="
		public Keyword getOpGreaterThanSignEqualsSignKeyword_1_1_0_0() { return cOpGreaterThanSignEqualsSignKeyword_1_1_0_0; }
		
		//"<="
		public Keyword getOpLessThanSignEqualsSignKeyword_1_1_0_1() { return cOpLessThanSignEqualsSignKeyword_1_1_0_1; }
		
		//">"
		public Keyword getOpGreaterThanSignKeyword_1_1_0_2() { return cOpGreaterThanSignKeyword_1_1_0_2; }
		
		//"<"
		public Keyword getOpLessThanSignKeyword_1_1_0_3() { return cOpLessThanSignKeyword_1_1_0_3; }
		
		//right=PlusOrMinus
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//PlusOrMinus
		public RuleCall getRightPlusOrMinusParserRuleCall_1_2_0() { return cRightPlusOrMinusParserRuleCall_1_2_0; }
	}
	public class PlusOrMinusElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.arsene.workflow.Workflow.PlusOrMinus");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cModParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cAlternatives_1_0.eContents().get(0);
		private final Action cPlusLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Keyword cPlusSignKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final Action cMinusLeftAction_1_0_1_0 = (Action)cGroup_1_0_1.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1_0_1_1 = (Keyword)cGroup_1_0_1.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightModParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//PlusOrMinus returns Expression:
		//    Mod (({Plus.left=current} '+' | {Minus.left=current} '-')
		//    right=Mod)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Mod (({Plus.left=current} '+' | {Minus.left=current} '-')
		//right=Mod)*
		public Group getGroup() { return cGroup; }
		
		//Mod
		public RuleCall getModParserRuleCall_0() { return cModParserRuleCall_0; }
		
		//(({Plus.left=current} '+' | {Minus.left=current} '-')
		//   right=Mod)*
		public Group getGroup_1() { return cGroup_1; }
		
		//({Plus.left=current} '+' | {Minus.left=current} '-')
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//{Plus.left=current} '+'
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }
		
		//{Plus.left=current}
		public Action getPlusLeftAction_1_0_0_0() { return cPlusLeftAction_1_0_0_0; }
		
		//'+'
		public Keyword getPlusSignKeyword_1_0_0_1() { return cPlusSignKeyword_1_0_0_1; }
		
		//{Minus.left=current} '-'
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }
		
		//{Minus.left=current}
		public Action getMinusLeftAction_1_0_1_0() { return cMinusLeftAction_1_0_1_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_1_0_1_1() { return cHyphenMinusKeyword_1_0_1_1; }
		
		//right=Mod
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//Mod
		public RuleCall getRightModParserRuleCall_1_1_0() { return cRightModParserRuleCall_1_1_0; }
	}
	public class ModElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.arsene.workflow.Workflow.Mod");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMulOrDivParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Action cModLeftAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Assignment cOpAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final Keyword cOpPercentSignKeyword_1_0_1_0 = (Keyword)cOpAssignment_1_0_1.eContents().get(0);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightMulOrDivParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//Mod returns Expression:
		//    MulOrDiv (({Mod.left=current} op=('%'))
		//    right=MulOrDiv)*;
		@Override public ParserRule getRule() { return rule; }
		
		//MulOrDiv (({Mod.left=current} op=('%'))
		//right=MulOrDiv)*
		public Group getGroup() { return cGroup; }
		
		//MulOrDiv
		public RuleCall getMulOrDivParserRuleCall_0() { return cMulOrDivParserRuleCall_0; }
		
		//(({Mod.left=current} op=('%'))
		//   right=MulOrDiv)*
		public Group getGroup_1() { return cGroup_1; }
		
		//({Mod.left=current} op=('%'))
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//{Mod.left=current}
		public Action getModLeftAction_1_0_0() { return cModLeftAction_1_0_0; }
		
		//op=('%')
		public Assignment getOpAssignment_1_0_1() { return cOpAssignment_1_0_1; }
		
		//('%')
		public Keyword getOpPercentSignKeyword_1_0_1_0() { return cOpPercentSignKeyword_1_0_1_0; }
		
		//right=MulOrDiv
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//MulOrDiv
		public RuleCall getRightMulOrDivParserRuleCall_1_1_0() { return cRightMulOrDivParserRuleCall_1_1_0; }
	}
	public class MulOrDivElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.arsene.workflow.Workflow.MulOrDiv");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExpoParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Action cMulOrDivLeftAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Assignment cOpAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final Alternatives cOpAlternatives_1_0_1_0 = (Alternatives)cOpAssignment_1_0_1.eContents().get(0);
		private final Keyword cOpAsteriskKeyword_1_0_1_0_0 = (Keyword)cOpAlternatives_1_0_1_0.eContents().get(0);
		private final Keyword cOpSolidusKeyword_1_0_1_0_1 = (Keyword)cOpAlternatives_1_0_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightExpoParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//MulOrDiv returns Expression:
		//    Expo (({MulOrDiv.left=current} op=('*' | '/'))
		//    right=Expo)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Expo (({MulOrDiv.left=current} op=('*' | '/'))
		//right=Expo)*
		public Group getGroup() { return cGroup; }
		
		//Expo
		public RuleCall getExpoParserRuleCall_0() { return cExpoParserRuleCall_0; }
		
		//(({MulOrDiv.left=current} op=('*' | '/'))
		//   right=Expo)*
		public Group getGroup_1() { return cGroup_1; }
		
		//({MulOrDiv.left=current} op=('*' | '/'))
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//{MulOrDiv.left=current}
		public Action getMulOrDivLeftAction_1_0_0() { return cMulOrDivLeftAction_1_0_0; }
		
		//op=('*' | '/')
		public Assignment getOpAssignment_1_0_1() { return cOpAssignment_1_0_1; }
		
		//('*' | '/')
		public Alternatives getOpAlternatives_1_0_1_0() { return cOpAlternatives_1_0_1_0; }
		
		//'*'
		public Keyword getOpAsteriskKeyword_1_0_1_0_0() { return cOpAsteriskKeyword_1_0_1_0_0; }
		
		//'/'
		public Keyword getOpSolidusKeyword_1_0_1_0_1() { return cOpSolidusKeyword_1_0_1_0_1; }
		
		//right=Expo
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//Expo
		public RuleCall getRightExpoParserRuleCall_1_1_0() { return cRightExpoParserRuleCall_1_1_0; }
	}
	public class ExpoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.arsene.workflow.Workflow.Expo");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPrimaryParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Action cExpoLeftAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Assignment cOpAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final Keyword cOpCircumflexAccentKeyword_1_0_1_0 = (Keyword)cOpAssignment_1_0_1.eContents().get(0);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightPrimaryParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//// exponential operator
		//Expo returns Expression:
		//    Primary (({Expo.left=current} op=('^'))
		//    right=Primary)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Primary (({Expo.left=current} op=('^'))
		//right=Primary)*
		public Group getGroup() { return cGroup; }
		
		//Primary
		public RuleCall getPrimaryParserRuleCall_0() { return cPrimaryParserRuleCall_0; }
		
		//(({Expo.left=current} op=('^'))
		//   right=Primary)*
		public Group getGroup_1() { return cGroup_1; }
		
		//({Expo.left=current} op=('^'))
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//{Expo.left=current}
		public Action getExpoLeftAction_1_0_0() { return cExpoLeftAction_1_0_0; }
		
		//op=('^')
		public Assignment getOpAssignment_1_0_1() { return cOpAssignment_1_0_1; }
		
		//('^')
		public Keyword getOpCircumflexAccentKeyword_1_0_1_0() { return cOpCircumflexAccentKeyword_1_0_1_0; }
		
		//right=Primary
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//Primary
		public RuleCall getRightPrimaryParserRuleCall_1_1_0() { return cRightPrimaryParserRuleCall_1_1_0; }
	}
	public class PrimaryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.arsene.workflow.Workflow.Primary");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cNotAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cExclamationMarkKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cExpressionAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cExpressionPrimaryParserRuleCall_1_2_0 = (RuleCall)cExpressionAssignment_1_2.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cArithmeticSignedAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cExpressionAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cExpressionPrimaryParserRuleCall_2_2_0 = (RuleCall)cExpressionAssignment_2_2.eContents().get(0);
		private final RuleCall cAtomicParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Primary returns Expression:
		//    '(' Expression ')' |
		//    {Not} "!" expression=Primary | /* right associativity */
		//    {ArithmeticSigned} "-" expression=Primary | /* right associativity */
		//    Atomic;
		@Override public ParserRule getRule() { return rule; }
		
		//'(' Expression ')' |
		//{Not} "!" expression=Primary | /* right associativity */
		//{ArithmeticSigned} "-" expression=Primary | /* right associativity */
		//Atomic
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'(' Expression ')'
		public Group getGroup_0() { return cGroup_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_0() { return cLeftParenthesisKeyword_0_0; }
		
		//Expression
		public RuleCall getExpressionParserRuleCall_0_1() { return cExpressionParserRuleCall_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_2() { return cRightParenthesisKeyword_0_2; }
		
		//{Not} "!" expression=Primary
		public Group getGroup_1() { return cGroup_1; }
		
		//{Not}
		public Action getNotAction_1_0() { return cNotAction_1_0; }
		
		//"!"
		public Keyword getExclamationMarkKeyword_1_1() { return cExclamationMarkKeyword_1_1; }
		
		//expression=Primary
		public Assignment getExpressionAssignment_1_2() { return cExpressionAssignment_1_2; }
		
		//Primary
		public RuleCall getExpressionPrimaryParserRuleCall_1_2_0() { return cExpressionPrimaryParserRuleCall_1_2_0; }
		
		///* right associativity */
		//   {ArithmeticSigned} "-" expression=Primary
		public Group getGroup_2() { return cGroup_2; }
		
		///* right associativity */
		//   {ArithmeticSigned}
		public Action getArithmeticSignedAction_2_0() { return cArithmeticSignedAction_2_0; }
		
		//"-"
		public Keyword getHyphenMinusKeyword_2_1() { return cHyphenMinusKeyword_2_1; }
		
		//expression=Primary
		public Assignment getExpressionAssignment_2_2() { return cExpressionAssignment_2_2; }
		
		//Primary
		public RuleCall getExpressionPrimaryParserRuleCall_2_2_0() { return cExpressionPrimaryParserRuleCall_2_2_0; }
		
		///* right associativity */
		//   Atomic
		public RuleCall getAtomicParserRuleCall_3() { return cAtomicParserRuleCall_3; }
	}
	public class AtomicElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.arsene.workflow.Workflow.Atomic");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cIntConstantAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cValueAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_0_1_0 = (RuleCall)cValueAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cStringConstantAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cValueAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_1_1_0 = (RuleCall)cValueAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cBoolConstantAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Assignment cValueAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final Alternatives cValueAlternatives_2_1_0 = (Alternatives)cValueAssignment_2_1.eContents().get(0);
		private final Keyword cValueTrueKeyword_2_1_0_0 = (Keyword)cValueAlternatives_2_1_0.eContents().get(0);
		private final Keyword cValueFalseKeyword_2_1_0_1 = (Keyword)cValueAlternatives_2_1_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cVariableRefAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Assignment cVariableAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cVariableVariableCrossReference_3_1_0 = (CrossReference)cVariableAssignment_3_1.eContents().get(0);
		private final RuleCall cVariableVariableIDTerminalRuleCall_3_1_0_1 = (RuleCall)cVariableVariableCrossReference_3_1_0.eContents().get(1);
		
		//Atomic returns Expression:
		//    {IntConstant} value=INT |
		//    {StringConstant} value=STRING |
		//    {BoolConstant} value=('true' | 'false') |
		//    {VariableRef} variable=[Variable];
		@Override public ParserRule getRule() { return rule; }
		
		//{IntConstant} value=INT |
		//{StringConstant} value=STRING |
		//{BoolConstant} value=('true' | 'false') |
		//{VariableRef} variable=[Variable]
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{IntConstant} value=INT
		public Group getGroup_0() { return cGroup_0; }
		
		//{IntConstant}
		public Action getIntConstantAction_0_0() { return cIntConstantAction_0_0; }
		
		//value=INT
		public Assignment getValueAssignment_0_1() { return cValueAssignment_0_1; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_0_1_0() { return cValueINTTerminalRuleCall_0_1_0; }
		
		//{StringConstant} value=STRING
		public Group getGroup_1() { return cGroup_1; }
		
		//{StringConstant}
		public Action getStringConstantAction_1_0() { return cStringConstantAction_1_0; }
		
		//value=STRING
		public Assignment getValueAssignment_1_1() { return cValueAssignment_1_1; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_1_1_0() { return cValueSTRINGTerminalRuleCall_1_1_0; }
		
		//{BoolConstant} value=('true' | 'false')
		public Group getGroup_2() { return cGroup_2; }
		
		//{BoolConstant}
		public Action getBoolConstantAction_2_0() { return cBoolConstantAction_2_0; }
		
		//value=('true' | 'false')
		public Assignment getValueAssignment_2_1() { return cValueAssignment_2_1; }
		
		//('true' | 'false')
		public Alternatives getValueAlternatives_2_1_0() { return cValueAlternatives_2_1_0; }
		
		//'true'
		public Keyword getValueTrueKeyword_2_1_0_0() { return cValueTrueKeyword_2_1_0_0; }
		
		//'false'
		public Keyword getValueFalseKeyword_2_1_0_1() { return cValueFalseKeyword_2_1_0_1; }
		
		//{VariableRef} variable=[Variable]
		public Group getGroup_3() { return cGroup_3; }
		
		//{VariableRef}
		public Action getVariableRefAction_3_0() { return cVariableRefAction_3_0; }
		
		//variable=[Variable]
		public Assignment getVariableAssignment_3_1() { return cVariableAssignment_3_1; }
		
		//[Variable]
		public CrossReference getVariableVariableCrossReference_3_1_0() { return cVariableVariableCrossReference_3_1_0; }
		
		//ID
		public RuleCall getVariableVariableIDTerminalRuleCall_3_1_0_1() { return cVariableVariableIDTerminalRuleCall_3_1_0_1; }
	}
	
	public class WorkflowTypeElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "com.arsene.workflow.Workflow.WorkflowType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cSequenceEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cSequenceSequenceKeyword_0_0 = (Keyword)cSequenceEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cParallelEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cParallelParallelKeyword_1_0 = (Keyword)cParallelEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum WorkflowType:
		//    sequence='sequence' | parallel='parallel';
		public EnumRule getRule() { return rule; }
		
		//sequence='sequence' | parallel='parallel'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//sequence='sequence'
		public EnumLiteralDeclaration getSequenceEnumLiteralDeclaration_0() { return cSequenceEnumLiteralDeclaration_0; }
		
		//'sequence'
		public Keyword getSequenceSequenceKeyword_0_0() { return cSequenceSequenceKeyword_0_0; }
		
		//parallel='parallel'
		public EnumLiteralDeclaration getParallelEnumLiteralDeclaration_1() { return cParallelEnumLiteralDeclaration_1; }
		
		//'parallel'
		public Keyword getParallelParallelKeyword_1_0() { return cParallelParallelKeyword_1_0; }
	}
	
	private final WorkflowProgramModelElements pWorkflowProgramModel;
	private final FeatureElements pFeature;
	private final WorkflowElements pWorkflow;
	private final StepElements pStep;
	private final WorkflowTypeElements eWorkflowType;
	private final ExecuteElements pExecute;
	private final MethodElements pMethod;
	private final BlockElements pBlock;
	private final ReturnElements pReturn;
	private final PrimitiveTypeElements pPrimitiveType;
	private final StatementElements pStatement;
	private final MethodInvocationElements pMethodInvocation;
	private final ServiceElements pService;
	private final IfStatementElements pIfStatement;
	private final IfBlockElements pIfBlock;
	private final LoopStatementElements pLoopStatement;
	private final VariableElements pVariable;
	private final VariableTypeElements pVariableType;
	private final ParameterElements pParameter;
	private final DisplayElements pDisplay;
	private final AssignmentElements pAssignment;
	private final ExpressionElements pExpression;
	private final OrElements pOr;
	private final AndElements pAnd;
	private final EqualityElements pEquality;
	private final ComparisonElements pComparison;
	private final PlusOrMinusElements pPlusOrMinus;
	private final ModElements pMod;
	private final MulOrDivElements pMulOrDiv;
	private final ExpoElements pExpo;
	private final PrimaryElements pPrimary;
	private final AtomicElements pAtomic;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public WorkflowGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pWorkflowProgramModel = new WorkflowProgramModelElements();
		this.pFeature = new FeatureElements();
		this.pWorkflow = new WorkflowElements();
		this.pStep = new StepElements();
		this.eWorkflowType = new WorkflowTypeElements();
		this.pExecute = new ExecuteElements();
		this.pMethod = new MethodElements();
		this.pBlock = new BlockElements();
		this.pReturn = new ReturnElements();
		this.pPrimitiveType = new PrimitiveTypeElements();
		this.pStatement = new StatementElements();
		this.pMethodInvocation = new MethodInvocationElements();
		this.pService = new ServiceElements();
		this.pIfStatement = new IfStatementElements();
		this.pIfBlock = new IfBlockElements();
		this.pLoopStatement = new LoopStatementElements();
		this.pVariable = new VariableElements();
		this.pVariableType = new VariableTypeElements();
		this.pParameter = new ParameterElements();
		this.pDisplay = new DisplayElements();
		this.pAssignment = new AssignmentElements();
		this.pExpression = new ExpressionElements();
		this.pOr = new OrElements();
		this.pAnd = new AndElements();
		this.pEquality = new EqualityElements();
		this.pComparison = new ComparisonElements();
		this.pPlusOrMinus = new PlusOrMinusElements();
		this.pMod = new ModElements();
		this.pMulOrDiv = new MulOrDivElements();
		this.pExpo = new ExpoElements();
		this.pPrimary = new PrimaryElements();
		this.pAtomic = new AtomicElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("com.arsene.workflow.Workflow".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	///**
	// * In this chapter, we implemented a DSL for expressions. This allowed us to explore
	// * some techniques for dealing with recursive grammar rule definitions in Xtext
	// * grammars and some simple type checking. We also showed how to write an
	// * interpreter for an Xtext DSL.
	// * In the next chapter, we will develop a small object-oriented DSL. We will use this
	// * DSL to show some advanced type checking techniques that deal with object-oriented
	// * features such as inheritance and subtyping (type conformance).
	// */
	//WorkflowProgramModel:
	//    features+=Feature*;
	public WorkflowProgramModelElements getWorkflowProgramModelAccess() {
		return pWorkflowProgramModel;
	}
	
	public ParserRule getWorkflowProgramModelRule() {
		return getWorkflowProgramModelAccess().getRule();
	}
	
	//Feature:
	//    statement=Statement | Method=Method | workflow=Workflow;
	public FeatureElements getFeatureAccess() {
		return pFeature;
	}
	
	public ParserRule getFeatureRule() {
		return getFeatureAccess().getRule();
	}
	
	////------------------------------  WORKFLOW  -----------------------------------
	//Workflow:
	//    'Workflow' name=ID ('type:' type=WorkflowType)?
	//    '{'
	//    steps+=Step*
	//    '}'
	//    execute=Execute;
	public WorkflowElements getWorkflowAccess() {
		return pWorkflow;
	}
	
	public ParserRule getWorkflowRule() {
		return getWorkflowAccess().getRule();
	}
	
	//Step:
	//    'step' name=STRING body=Block;
	public StepElements getStepAccess() {
		return pStep;
	}
	
	public ParserRule getStepRule() {
		return getStepAccess().getRule();
	}
	
	//enum WorkflowType:
	//    sequence='sequence' | parallel='parallel';
	public WorkflowTypeElements getWorkflowTypeAccess() {
		return eWorkflowType;
	}
	
	public EnumRule getWorkflowTypeRule() {
		return getWorkflowTypeAccess().getRule();
	}
	
	//Execute:
	//    'Execute' workflow=[Workflow] '()';
	public ExecuteElements getExecuteAccess() {
		return pExecute;
	}
	
	public ParserRule getExecuteRule() {
		return getExecuteAccess().getRule();
	}
	
	////------------------------------  METHOD  -------------------------------------
	//Method:
	//    'function' name=ID
	//    ('(' (params+=Variable (',' params+=Variable)*)? ')' | '()')
	//    body=Block;
	public MethodElements getMethodAccess() {
		return pMethod;
	}
	
	public ParserRule getMethodRule() {
		return getMethodAccess().getRule();
	}
	
	//Block:
	//    {Block}'{'
	//        statements+=Statement*
	//        returnStatement=Return?
	//    '}';
	public BlockElements getBlockAccess() {
		return pBlock;
	}
	
	public ParserRule getBlockRule() {
		return getBlockAccess().getRule();
	}
	
	//Return:
	//    'return' expression=Expression;
	public ReturnElements getReturnAccess() {
		return pReturn;
	}
	
	public ParserRule getReturnRule() {
		return getReturnAccess().getRule();
	}
	
	//PrimitiveType:
	//    typeName=('boolean' | 'number' | 'string') ':' name=ID;
	public PrimitiveTypeElements getPrimitiveTypeAccess() {
		return pPrimitiveType;
	}
	
	public ParserRule getPrimitiveTypeRule() {
		return getPrimitiveTypeAccess().getRule();
	}
	
	//// ------------------------------------------ STATEMENT--------------------------------------------
	//Statement:
	//    variabl=Variable |
	//    print=Display |
	//    assignment=Assignment |
	//    ifStatement=IfStatement |
	//    loop=LoopStatement |
	//    methodInvocation=MethodInvocation;
	public StatementElements getStatementAccess() {
		return pStatement;
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}
	
	//// -------------------------------------- METHOD INVOCATION ----------------------------------------
	//MethodInvocation returns Expression:
	//    {MethodInvocation}'call' (invokedMethod=[Method] | service=Service) ('(' (args+=Expression (','
	//    args+=Expression)*)? ')' | '()');
	public MethodInvocationElements getMethodInvocationAccess() {
		return pMethodInvocation;
	}
	
	public ParserRule getMethodInvocationRule() {
		return getMethodInvocationAccess().getRule();
	}
	
	//// ( variable=[Variable] '=')?
	////--------------------------------  SERVICE  --------------------------------
	//Service:
	//    'service' name=ID;
	public ServiceElements getServiceAccess() {
		return pService;
	}
	
	public ParserRule getServiceRule() {
		return getServiceAccess().getRule();
	}
	
	////------------------------------- LOOP and IF STATEMENT --------------------------------------------
	//IfStatement:
	//    'if' '(' expression=Expression ')' thenBlock=IfBlock
	//    (=>'else' elseBlock=IfBlock)?;
	public IfStatementElements getIfStatementAccess() {
		return pIfStatement;
	}
	
	public ParserRule getIfStatementRule() {
		return getIfStatementAccess().getRule();
	}
	
	//IfBlock returns Block:
	//    statements+=Statement
	//    | Block;
	public IfBlockElements getIfBlockAccess() {
		return pIfBlock;
	}
	
	public ParserRule getIfBlockRule() {
		return getIfBlockAccess().getRule();
	}
	
	//LoopStatement:
	//    'loop:' 'if' '(' expression=Expression ')' thenBlock=IfBlock;
	public LoopStatementElements getLoopStatementAccess() {
		return pLoopStatement;
	}
	
	public ParserRule getLoopStatementRule() {
		return getLoopStatementAccess().getRule();
	}
	
	//// --------------------------------VARIABLE and ASSIGNEMENT --------------------------------------------
	//Variable:
	//    ((typeName=('boolean' | 'number' | 'string') ':' name=ID)|('Define'? VariableType name=ID (array?='[' (length=INT)? ']')?)) ('=' ((expression=Expression) | (methodInvocation=MethodInvocation)))?;
	public VariableElements getVariableAccess() {
		return pVariable;
	}
	
	public ParserRule getVariableRule() {
		return getVariableAccess().getRule();
	}
	
	//VariableType:
	//    'var' | 'Artifact' | 'Event';
	public VariableTypeElements getVariableTypeAccess() {
		return pVariableType;
	}
	
	public ParserRule getVariableTypeRule() {
		return getVariableTypeAccess().getRule();
	}
	
	//Parameter:
	//    VariableType name=ID;
	public ParameterElements getParameterAccess() {
		return pParameter;
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}
	
	//Display:
	//    'print' '(' expression=Expression ')';
	public DisplayElements getDisplayAccess() {
		return pDisplay;
	}
	
	public ParserRule getDisplayRule() {
		return getDisplayAccess().getRule();
	}
	
	//Assignment:
	//    variable=[Variable] '=' ((expression=Expression) | (methodInvocation=MethodInvocation));
	public AssignmentElements getAssignmentAccess() {
		return pAssignment;
	}
	
	public ParserRule getAssignmentRule() {
		return getAssignmentAccess().getRule();
	}
	
	// // Right associativity
	////--- Arithmetic/Logic expressions --------------------
	//// These are inspired by the solution of Lorenzo Bettini
	//// the author of "Implementing Domain-Specific Languages with Xtext and Xtend"
	//// --------------------------------------------------------------------------------------------------
	//Expression:
	//    Or;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//Or returns Expression:
	//    And ({Or.left=current} "or" right=And)*;
	public OrElements getOrAccess() {
		return pOr;
	}
	
	public ParserRule getOrRule() {
		return getOrAccess().getRule();
	}
	
	//And returns Expression:
	//    Equality ({And.left=current} "and" right=Equality)*;
	public AndElements getAndAccess() {
		return pAnd;
	}
	
	public ParserRule getAndRule() {
		return getAndAccess().getRule();
	}
	
	//Equality returns Expression:
	//    Comparison ({Equality.left=current} op=("==" | "!=")
	//    right=Comparison)*;
	public EqualityElements getEqualityAccess() {
		return pEquality;
	}
	
	public ParserRule getEqualityRule() {
		return getEqualityAccess().getRule();
	}
	
	//Comparison returns Expression:
	//    PlusOrMinus ({Comparison.left=current} op=(">=" | "<=" | ">" | "<")
	//    right=PlusOrMinus)*;
	public ComparisonElements getComparisonAccess() {
		return pComparison;
	}
	
	public ParserRule getComparisonRule() {
		return getComparisonAccess().getRule();
	}
	
	//PlusOrMinus returns Expression:
	//    Mod (({Plus.left=current} '+' | {Minus.left=current} '-')
	//    right=Mod)*;
	public PlusOrMinusElements getPlusOrMinusAccess() {
		return pPlusOrMinus;
	}
	
	public ParserRule getPlusOrMinusRule() {
		return getPlusOrMinusAccess().getRule();
	}
	
	//Mod returns Expression:
	//    MulOrDiv (({Mod.left=current} op=('%'))
	//    right=MulOrDiv)*;
	public ModElements getModAccess() {
		return pMod;
	}
	
	public ParserRule getModRule() {
		return getModAccess().getRule();
	}
	
	//MulOrDiv returns Expression:
	//    Expo (({MulOrDiv.left=current} op=('*' | '/'))
	//    right=Expo)*;
	public MulOrDivElements getMulOrDivAccess() {
		return pMulOrDiv;
	}
	
	public ParserRule getMulOrDivRule() {
		return getMulOrDivAccess().getRule();
	}
	
	//// exponential operator
	//Expo returns Expression:
	//    Primary (({Expo.left=current} op=('^'))
	//    right=Primary)*;
	public ExpoElements getExpoAccess() {
		return pExpo;
	}
	
	public ParserRule getExpoRule() {
		return getExpoAccess().getRule();
	}
	
	//Primary returns Expression:
	//    '(' Expression ')' |
	//    {Not} "!" expression=Primary | /* right associativity */
	//    {ArithmeticSigned} "-" expression=Primary | /* right associativity */
	//    Atomic;
	public PrimaryElements getPrimaryAccess() {
		return pPrimary;
	}
	
	public ParserRule getPrimaryRule() {
		return getPrimaryAccess().getRule();
	}
	
	//Atomic returns Expression:
	//    {IntConstant} value=INT |
	//    {StringConstant} value=STRING |
	//    {BoolConstant} value=('true' | 'false') |
	//    {VariableRef} variable=[Variable];
	public AtomicElements getAtomicAccess() {
		return pAtomic;
	}
	
	public ParserRule getAtomicRule() {
		return getAtomicAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
