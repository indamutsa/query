/**
 * generated by Xtext 2.25.0
 */
package com.arsene.workflow.workflow.impl;

import com.arsene.workflow.workflow.Expression;
import com.arsene.workflow.workflow.Method;
import com.arsene.workflow.workflow.MethodInvocation;
import com.arsene.workflow.workflow.Service;
import com.arsene.workflow.workflow.WorkflowPackage;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Method Invocation</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link com.arsene.workflow.workflow.impl.MethodInvocationImpl#getInvokedMethod <em>Invoked Method</em>}</li>
 *   <li>{@link com.arsene.workflow.workflow.impl.MethodInvocationImpl#getService <em>Service</em>}</li>
 *   <li>{@link com.arsene.workflow.workflow.impl.MethodInvocationImpl#getArgs <em>Args</em>}</li>
 * </ul>
 *
 * @generated
 */
public class MethodInvocationImpl extends ExpressionImpl implements MethodInvocation
{
  /**
   * The cached value of the '{@link #getInvokedMethod() <em>Invoked Method</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getInvokedMethod()
   * @generated
   * @ordered
   */
  protected Method invokedMethod;

  /**
   * The cached value of the '{@link #getService() <em>Service</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getService()
   * @generated
   * @ordered
   */
  protected Service service;

  /**
   * The cached value of the '{@link #getArgs() <em>Args</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getArgs()
   * @generated
   * @ordered
   */
  protected EList<Expression> args;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected MethodInvocationImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return WorkflowPackage.Literals.METHOD_INVOCATION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Method getInvokedMethod()
  {
    if (invokedMethod != null && invokedMethod.eIsProxy())
    {
      InternalEObject oldInvokedMethod = (InternalEObject)invokedMethod;
      invokedMethod = (Method)eResolveProxy(oldInvokedMethod);
      if (invokedMethod != oldInvokedMethod)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, WorkflowPackage.METHOD_INVOCATION__INVOKED_METHOD, oldInvokedMethod, invokedMethod));
      }
    }
    return invokedMethod;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Method basicGetInvokedMethod()
  {
    return invokedMethod;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setInvokedMethod(Method newInvokedMethod)
  {
    Method oldInvokedMethod = invokedMethod;
    invokedMethod = newInvokedMethod;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, WorkflowPackage.METHOD_INVOCATION__INVOKED_METHOD, oldInvokedMethod, invokedMethod));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Service getService()
  {
    return service;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetService(Service newService, NotificationChain msgs)
  {
    Service oldService = service;
    service = newService;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, WorkflowPackage.METHOD_INVOCATION__SERVICE, oldService, newService);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setService(Service newService)
  {
    if (newService != service)
    {
      NotificationChain msgs = null;
      if (service != null)
        msgs = ((InternalEObject)service).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - WorkflowPackage.METHOD_INVOCATION__SERVICE, null, msgs);
      if (newService != null)
        msgs = ((InternalEObject)newService).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - WorkflowPackage.METHOD_INVOCATION__SERVICE, null, msgs);
      msgs = basicSetService(newService, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, WorkflowPackage.METHOD_INVOCATION__SERVICE, newService, newService));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Expression> getArgs()
  {
    if (args == null)
    {
      args = new EObjectContainmentEList<Expression>(Expression.class, this, WorkflowPackage.METHOD_INVOCATION__ARGS);
    }
    return args;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case WorkflowPackage.METHOD_INVOCATION__SERVICE:
        return basicSetService(null, msgs);
      case WorkflowPackage.METHOD_INVOCATION__ARGS:
        return ((InternalEList<?>)getArgs()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case WorkflowPackage.METHOD_INVOCATION__INVOKED_METHOD:
        if (resolve) return getInvokedMethod();
        return basicGetInvokedMethod();
      case WorkflowPackage.METHOD_INVOCATION__SERVICE:
        return getService();
      case WorkflowPackage.METHOD_INVOCATION__ARGS:
        return getArgs();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case WorkflowPackage.METHOD_INVOCATION__INVOKED_METHOD:
        setInvokedMethod((Method)newValue);
        return;
      case WorkflowPackage.METHOD_INVOCATION__SERVICE:
        setService((Service)newValue);
        return;
      case WorkflowPackage.METHOD_INVOCATION__ARGS:
        getArgs().clear();
        getArgs().addAll((Collection<? extends Expression>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case WorkflowPackage.METHOD_INVOCATION__INVOKED_METHOD:
        setInvokedMethod((Method)null);
        return;
      case WorkflowPackage.METHOD_INVOCATION__SERVICE:
        setService((Service)null);
        return;
      case WorkflowPackage.METHOD_INVOCATION__ARGS:
        getArgs().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case WorkflowPackage.METHOD_INVOCATION__INVOKED_METHOD:
        return invokedMethod != null;
      case WorkflowPackage.METHOD_INVOCATION__SERVICE:
        return service != null;
      case WorkflowPackage.METHOD_INVOCATION__ARGS:
        return args != null && !args.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //MethodInvocationImpl
