/**
 * generated by Xtext 2.25.0
 */
package com.arsene.workflow.workflow.impl;

import com.arsene.workflow.workflow.Assignment;
import com.arsene.workflow.workflow.Display;
import com.arsene.workflow.workflow.Expression;
import com.arsene.workflow.workflow.IfStatement;
import com.arsene.workflow.workflow.LoopStatement;
import com.arsene.workflow.workflow.Statement;
import com.arsene.workflow.workflow.Variable;
import com.arsene.workflow.workflow.WorkflowPackage;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Statement</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link com.arsene.workflow.workflow.impl.StatementImpl#getVariabl <em>Variabl</em>}</li>
 *   <li>{@link com.arsene.workflow.workflow.impl.StatementImpl#getPrint <em>Print</em>}</li>
 *   <li>{@link com.arsene.workflow.workflow.impl.StatementImpl#getAssignment <em>Assignment</em>}</li>
 *   <li>{@link com.arsene.workflow.workflow.impl.StatementImpl#getIfStatement <em>If Statement</em>}</li>
 *   <li>{@link com.arsene.workflow.workflow.impl.StatementImpl#getLoop <em>Loop</em>}</li>
 *   <li>{@link com.arsene.workflow.workflow.impl.StatementImpl#getMethodInvocation <em>Method Invocation</em>}</li>
 * </ul>
 *
 * @generated
 */
public class StatementImpl extends MinimalEObjectImpl.Container implements Statement
{
  /**
   * The cached value of the '{@link #getVariabl() <em>Variabl</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getVariabl()
   * @generated
   * @ordered
   */
  protected Variable variabl;

  /**
   * The cached value of the '{@link #getPrint() <em>Print</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPrint()
   * @generated
   * @ordered
   */
  protected Display print;

  /**
   * The cached value of the '{@link #getAssignment() <em>Assignment</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAssignment()
   * @generated
   * @ordered
   */
  protected Assignment assignment;

  /**
   * The cached value of the '{@link #getIfStatement() <em>If Statement</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getIfStatement()
   * @generated
   * @ordered
   */
  protected IfStatement ifStatement;

  /**
   * The cached value of the '{@link #getLoop() <em>Loop</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLoop()
   * @generated
   * @ordered
   */
  protected LoopStatement loop;

  /**
   * The cached value of the '{@link #getMethodInvocation() <em>Method Invocation</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMethodInvocation()
   * @generated
   * @ordered
   */
  protected Expression methodInvocation;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected StatementImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return WorkflowPackage.Literals.STATEMENT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Variable getVariabl()
  {
    return variabl;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetVariabl(Variable newVariabl, NotificationChain msgs)
  {
    Variable oldVariabl = variabl;
    variabl = newVariabl;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, WorkflowPackage.STATEMENT__VARIABL, oldVariabl, newVariabl);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setVariabl(Variable newVariabl)
  {
    if (newVariabl != variabl)
    {
      NotificationChain msgs = null;
      if (variabl != null)
        msgs = ((InternalEObject)variabl).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - WorkflowPackage.STATEMENT__VARIABL, null, msgs);
      if (newVariabl != null)
        msgs = ((InternalEObject)newVariabl).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - WorkflowPackage.STATEMENT__VARIABL, null, msgs);
      msgs = basicSetVariabl(newVariabl, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, WorkflowPackage.STATEMENT__VARIABL, newVariabl, newVariabl));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Display getPrint()
  {
    return print;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetPrint(Display newPrint, NotificationChain msgs)
  {
    Display oldPrint = print;
    print = newPrint;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, WorkflowPackage.STATEMENT__PRINT, oldPrint, newPrint);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setPrint(Display newPrint)
  {
    if (newPrint != print)
    {
      NotificationChain msgs = null;
      if (print != null)
        msgs = ((InternalEObject)print).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - WorkflowPackage.STATEMENT__PRINT, null, msgs);
      if (newPrint != null)
        msgs = ((InternalEObject)newPrint).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - WorkflowPackage.STATEMENT__PRINT, null, msgs);
      msgs = basicSetPrint(newPrint, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, WorkflowPackage.STATEMENT__PRINT, newPrint, newPrint));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Assignment getAssignment()
  {
    return assignment;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetAssignment(Assignment newAssignment, NotificationChain msgs)
  {
    Assignment oldAssignment = assignment;
    assignment = newAssignment;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, WorkflowPackage.STATEMENT__ASSIGNMENT, oldAssignment, newAssignment);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setAssignment(Assignment newAssignment)
  {
    if (newAssignment != assignment)
    {
      NotificationChain msgs = null;
      if (assignment != null)
        msgs = ((InternalEObject)assignment).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - WorkflowPackage.STATEMENT__ASSIGNMENT, null, msgs);
      if (newAssignment != null)
        msgs = ((InternalEObject)newAssignment).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - WorkflowPackage.STATEMENT__ASSIGNMENT, null, msgs);
      msgs = basicSetAssignment(newAssignment, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, WorkflowPackage.STATEMENT__ASSIGNMENT, newAssignment, newAssignment));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public IfStatement getIfStatement()
  {
    return ifStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetIfStatement(IfStatement newIfStatement, NotificationChain msgs)
  {
    IfStatement oldIfStatement = ifStatement;
    ifStatement = newIfStatement;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, WorkflowPackage.STATEMENT__IF_STATEMENT, oldIfStatement, newIfStatement);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setIfStatement(IfStatement newIfStatement)
  {
    if (newIfStatement != ifStatement)
    {
      NotificationChain msgs = null;
      if (ifStatement != null)
        msgs = ((InternalEObject)ifStatement).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - WorkflowPackage.STATEMENT__IF_STATEMENT, null, msgs);
      if (newIfStatement != null)
        msgs = ((InternalEObject)newIfStatement).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - WorkflowPackage.STATEMENT__IF_STATEMENT, null, msgs);
      msgs = basicSetIfStatement(newIfStatement, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, WorkflowPackage.STATEMENT__IF_STATEMENT, newIfStatement, newIfStatement));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public LoopStatement getLoop()
  {
    return loop;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetLoop(LoopStatement newLoop, NotificationChain msgs)
  {
    LoopStatement oldLoop = loop;
    loop = newLoop;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, WorkflowPackage.STATEMENT__LOOP, oldLoop, newLoop);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setLoop(LoopStatement newLoop)
  {
    if (newLoop != loop)
    {
      NotificationChain msgs = null;
      if (loop != null)
        msgs = ((InternalEObject)loop).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - WorkflowPackage.STATEMENT__LOOP, null, msgs);
      if (newLoop != null)
        msgs = ((InternalEObject)newLoop).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - WorkflowPackage.STATEMENT__LOOP, null, msgs);
      msgs = basicSetLoop(newLoop, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, WorkflowPackage.STATEMENT__LOOP, newLoop, newLoop));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Expression getMethodInvocation()
  {
    return methodInvocation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetMethodInvocation(Expression newMethodInvocation, NotificationChain msgs)
  {
    Expression oldMethodInvocation = methodInvocation;
    methodInvocation = newMethodInvocation;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, WorkflowPackage.STATEMENT__METHOD_INVOCATION, oldMethodInvocation, newMethodInvocation);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setMethodInvocation(Expression newMethodInvocation)
  {
    if (newMethodInvocation != methodInvocation)
    {
      NotificationChain msgs = null;
      if (methodInvocation != null)
        msgs = ((InternalEObject)methodInvocation).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - WorkflowPackage.STATEMENT__METHOD_INVOCATION, null, msgs);
      if (newMethodInvocation != null)
        msgs = ((InternalEObject)newMethodInvocation).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - WorkflowPackage.STATEMENT__METHOD_INVOCATION, null, msgs);
      msgs = basicSetMethodInvocation(newMethodInvocation, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, WorkflowPackage.STATEMENT__METHOD_INVOCATION, newMethodInvocation, newMethodInvocation));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case WorkflowPackage.STATEMENT__VARIABL:
        return basicSetVariabl(null, msgs);
      case WorkflowPackage.STATEMENT__PRINT:
        return basicSetPrint(null, msgs);
      case WorkflowPackage.STATEMENT__ASSIGNMENT:
        return basicSetAssignment(null, msgs);
      case WorkflowPackage.STATEMENT__IF_STATEMENT:
        return basicSetIfStatement(null, msgs);
      case WorkflowPackage.STATEMENT__LOOP:
        return basicSetLoop(null, msgs);
      case WorkflowPackage.STATEMENT__METHOD_INVOCATION:
        return basicSetMethodInvocation(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case WorkflowPackage.STATEMENT__VARIABL:
        return getVariabl();
      case WorkflowPackage.STATEMENT__PRINT:
        return getPrint();
      case WorkflowPackage.STATEMENT__ASSIGNMENT:
        return getAssignment();
      case WorkflowPackage.STATEMENT__IF_STATEMENT:
        return getIfStatement();
      case WorkflowPackage.STATEMENT__LOOP:
        return getLoop();
      case WorkflowPackage.STATEMENT__METHOD_INVOCATION:
        return getMethodInvocation();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case WorkflowPackage.STATEMENT__VARIABL:
        setVariabl((Variable)newValue);
        return;
      case WorkflowPackage.STATEMENT__PRINT:
        setPrint((Display)newValue);
        return;
      case WorkflowPackage.STATEMENT__ASSIGNMENT:
        setAssignment((Assignment)newValue);
        return;
      case WorkflowPackage.STATEMENT__IF_STATEMENT:
        setIfStatement((IfStatement)newValue);
        return;
      case WorkflowPackage.STATEMENT__LOOP:
        setLoop((LoopStatement)newValue);
        return;
      case WorkflowPackage.STATEMENT__METHOD_INVOCATION:
        setMethodInvocation((Expression)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case WorkflowPackage.STATEMENT__VARIABL:
        setVariabl((Variable)null);
        return;
      case WorkflowPackage.STATEMENT__PRINT:
        setPrint((Display)null);
        return;
      case WorkflowPackage.STATEMENT__ASSIGNMENT:
        setAssignment((Assignment)null);
        return;
      case WorkflowPackage.STATEMENT__IF_STATEMENT:
        setIfStatement((IfStatement)null);
        return;
      case WorkflowPackage.STATEMENT__LOOP:
        setLoop((LoopStatement)null);
        return;
      case WorkflowPackage.STATEMENT__METHOD_INVOCATION:
        setMethodInvocation((Expression)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case WorkflowPackage.STATEMENT__VARIABL:
        return variabl != null;
      case WorkflowPackage.STATEMENT__PRINT:
        return print != null;
      case WorkflowPackage.STATEMENT__ASSIGNMENT:
        return assignment != null;
      case WorkflowPackage.STATEMENT__IF_STATEMENT:
        return ifStatement != null;
      case WorkflowPackage.STATEMENT__LOOP:
        return loop != null;
      case WorkflowPackage.STATEMENT__METHOD_INVOCATION:
        return methodInvocation != null;
    }
    return super.eIsSet(featureID);
  }

} //StatementImpl
